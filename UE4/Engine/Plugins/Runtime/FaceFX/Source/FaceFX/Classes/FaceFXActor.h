#pragma once

#include "FaceFXAsset.h"
#include "FaceFXData.h"
#include "FaceFXActor.generated.h"

/** The data that holds the FaceFX related data without the animations. The binary data in here was generated by the FaceFX compiler for all target platforms and get written into PlatformData. 
 During cooking we remove all unnecessary data and move all into the first index location */

/** Asset that can be assigned to FaceFXComponents and which contain the FaceFX runtime data */
UCLASS(hideCategories=Object)
class FACEFX_API UFaceFXActor : public UFaceFXAsset
{
	GENERATED_UCLASS_BODY()

public:

#if WITH_EDITOR

	friend struct FFaceFXEditorTools;

	//UObject
	virtual void Serialize(FArchive& Ar) override;
	//~UObject

	/**
	* Links this set to the given animation set
	* @param AnimSet The asset to link with
	*/
	inline void LinkTo(class UFaceFXAnimSet* AnimSet)
	{
		AnimationSets.AddUnique(AnimSet);
	}

	/**
	* Unlinks this set from the given animation set
	* @param AnimSet The asset to unlink from
	* @returns True if any link was removed, else false
	*/
	inline bool UnlinkFrom(class UFaceFXAnimSet* AnimSet)
	{
		return AnimationSets.Remove(AnimSet) > 0;
	}

#endif //WITH_EDITOR

	/**
	* Gets the FaceFX data for the current target platform
	* @returns The data for the current target platform
	*/
	inline FFaceFXActorData& GetData()
	{
		checkf(PlatformData.Num(), TEXT("Asset not initialized yet."));

		//always take the first entry.
		//For non-cooked this will always be PC
		//For cooked this will always be the data from the target platform
		return PlatformData[0];
	}

	/**
	* Gets the FaceFX data for the current target platform
	* @returns The data for the current target platform
	*/
	inline const FFaceFXActorData& GetData() const
	{
		checkf(PlatformData.Num(), TEXT("Asset not initialized yet."));

		//always take the first entry.
		//For non-cooked this will always be PC
		//For cooked this will always be the data from the target platform
		return PlatformData[0];
	}

	/**
	* Checks if this FaceFX data asset it valid
	* @returns True if valid, else false
	*/
	virtual bool IsValid() const override
	{
		return IsAssetPathSet() && PlatformData.Num() > 0;
	}

	/**
	* Gets a specific animation data entry from the set
	* @param AnimGroup the animation group to look for
	* @param AnimName The animation to look for
	* @returns The animation data if found, else nullptr
	*/
	const FFaceFXAnimData* GetAnimation(const FName& AnimGroup, const FName& AnimName) const;

	/**
	* Gets a specific animation data entry from the set
	* @param AnimId the animation id to look for
	* @returns The animation data if found, else nullptr
	*/
	inline const FFaceFXAnimData* GetAnimation(const FFaceFXAnimId& AnimId) const
	{
		return GetAnimation(AnimId.Group, AnimId.Name);
	}

	/**
	* Gets the number of animations which are encapsulated in this asset
	* @return The animation count
	*/
	virtual int32 GetAnimationCount() const override;

	/**
	* Gets the details in a human readable string representation
	* @param OutDetails The resulting details string
	*/
	virtual void GetDetails(FString& OutDetails) const override;

	/**
	* Gets all animation groups
	* @param OutGroups The animation groups
	*/
	void GetAnimationGroups(TArray<FName>& OutGroups) const;

	/**
	* Gets the animation set that matches the given group name
	* @param Group The group to get the animation set from
	* @returns The matching animation set or nullptr if not found
	*/
	class UFaceFXAnimSet* GetAnimationSet(const FName& Group) const;

private:

	/** The data inside this data set. Its a list of data per platform. Indices: x86, PS4, XBoxOne. Will only contain one entry in cooked data */
	UPROPERTY(EditInstanceOnly, Category=FaceFX)
	TArray<FFaceFXActorData> PlatformData;

	/** The linked animation sets where this set look up the animations in */
	UPROPERTY(EditInstanceOnly, Category=FaceFX)
	TArray<class UFaceFXAnimSet*> AnimationSets;
};